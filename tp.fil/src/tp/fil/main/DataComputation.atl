-- @nsURI Java=http://www.eclipse.org/MoDisco/Java/0.2.incubation/java
-- @path Data=/tp.fil/src/tp/fil/resources/Data.ecore


module DataComputation;
create OUT: Data from IN: Java;
	
rule Model2Model {
	from
		s: Java!Model
	to
		d: Data!Model (
			name <- s.debug('Model: ').name.debug('name: ')
			,packages <- s.ownedElements.debug('packages: ')
		)
}

rule Package2Package {
	from
		s: Java!Package
	to
		d: Data!Package (
			name <- s.debug('Package: ').name.debug('name: ')
			,packages <- s.ownedPackages.debug('packages: ')
			,classes <- s.ownedElements.debug('classes: ') 
				-> select(i | i.oclIsTypeOf(Java!ClassDeclaration) or i.oclIsTypeOf(Java!InterfaceDeclaration))
		)
}

rule Class2Class {
	from
		s: Java!ClassDeclaration
	to
		d: Data!Class (
			name <- s.debug('ClassDeclaration: ').name.debug('name: ')
			,attributes <- s.bodyDeclarations.debug('attributes: ')
				-> select(i | 
					i.debug().oclIsTypeOf(Java!FieldDeclaration)
					or i.oclIsTypeOf(Java!PrimitiveType)
					or i.oclIsTypeOf(Java!ParameterizedType)
				)
			,methods <- s.bodyDeclarations.debug('methods: ')
				-> select(i |  i.oclIsTypeOf(Java!MethodDeclaration)
					or i.oclIsTypeOf(Java!PrimitiveType)
					or i.oclIsTypeOf(Java!ConstructorDeclaration)
				)
			,extends <- s.superClass.debug('extends: ')
			,implements <- s.superInterfaces.debug('implements: ')
		)
}

rule Interface2Class {
	from
		s: Java!InterfaceDeclaration
	to
		d: Data!Class (
			name <- s.debug('InterfaceDeclaration: ').name.debug('name: ')
			,attributes <- s.bodyDeclarations.debug('attributes: ')
				-> select(i | 
					i.debug().oclIsTypeOf(Java!FieldDeclaration)
					or i.oclIsTypeOf(Java!PrimitiveType)
					or i.oclIsTypeOf(Java!ParameterizedType)
					or i.oclIsTypeOf(Java!ArrayType)
				)
			,methods <- s.bodyDeclarations.debug('methods: ')
				-> select(i |  i.oclIsTypeOf(Java!MethodDeclaration))
			,extends <- s.superInterfaces.debug('extends: ')
		)
}

rule PrimitiveType2Class {
	from
		s: Java!PrimitiveType
	to
		d: Data!Class (
			name <- s.debug('PrimitiveType: ').name.debug('name: ')
		)
}

rule ParametrizedType2Class {
	from
		s: Java!ParameterizedType
	to
		d: Data!Class (
			name <- s.debug('ParameterizedType: ').name
				.replaceAll('[', 'I')
				.replaceAll(']', 'I')
				.replaceAll('<', '*')
				.replaceAll('>', '*')
				.debug('name: ')
		)
}

rule ArrayType2Class {
	from
		s: Java!ArrayType
	to
		d: Data!Class (
			name <- s.debug('ArrayType: ').name
				.replaceAll('[', 'I')
				.replaceAll(']', 'I')
				.replaceAll('<', '*')
				.replaceAll('>', '*')
				.debug('name: ')
		)
}

rule FieldDeclaration2Attribute {
	from
		s: Java!FieldDeclaration
	to
		d: Data!Attribute (
			name <- s.debug('FieldDeclaration: ').fragments.debug('fragments: ').first().name.debug('name: ')
			,type <- if (not s.type.oclIsUndefined()) then
					s.type.type.debug('type: ')
				else
					Java!PrimitiveTypeVoid
				endif
			,status <-  
				if s.modifier.oclIsUndefined().debug('modifier is undefined? :') then
					'public'
				else
					if s.modifier.debug('modifier: ').visibility.oclIsUndefined() then 
						'public'
					else
						s.modifier.visibility.debug('visibility: ').toString()
					endif
				endif
		)
}

rule Method2Method {
	from
		s: Java!MethodDeclaration
	to
		d: Data!Method (
			name <- s.debug('MethodDeclaration: ').name.debug('name: ')
			,returnType <- if (not s.returnType.oclIsUndefined().debug('returnType is undefined: ')) then
					s.returnType.type.debug('type: ')
				else
					Java!PrimitiveTypeVoid
				endif 
			,status <- 
				if s.modifier.oclIsUndefined().debug('modifier is undefined? :') then
					'public'
				else
					if s.modifier.debug('modifier: ').visibility.oclIsUndefined() then 
						'public'
					else
						s.modifier.visibility.debug('visibility: ').toString()
					endif
				endif
		)
}

rule Constructor2Method {
	from
		s: Java!ConstructorDeclaration
	to
		d: Data!Method (
			name <- s.debug('ConstructorDeclaration: ').name.debug('name: ')
			,returnType <- s.abstractTypeDeclaration
			,status <- 
				if s.modifier.oclIsUndefined().debug('modifier is undefined? :') then
					'public'
				else
					if s.modifier.debug('modifier: ').visibility.oclIsUndefined() then 
						'public'
					else
						s.modifier.visibility.debug('visibility: ').toString()
					endif
				endif
		)
}

